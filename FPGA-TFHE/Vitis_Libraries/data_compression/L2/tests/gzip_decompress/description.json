{
    "name": "Xilinx GZIP Decompression",
    "description": [
        "GZip Decompression Multiple Bytes 8"
    ],
    "flow": "vitis",
    "launch": [
        {
            "cmd_args": "-xbin BUILD/decompress.xclbin -d PROJECT/data/sample.txt.gz",
            "name": "generic launch for all flows"
        }
    ],
    "post_launch": [
        {
            "launch_cmd": [
                "XCL_EMULATION_MODE=$(TARGET) ./run.sh HOST_EXE LIB_DIR BUILD/decompress.xclbin"
            ]
        }
    ],
    "config_make": "./config.mk",
    "default_device": "u200",
    "platform_blacklist": [
        "zc"
    ],
    "platform_whitelist": [
        "u200",
        "u250",
        "u50",
        "vck190",
        "aws-vu9p-f1"
    ],
    "data": [
        "PROJECT/data/sample.txt.gz"
    ],
    "host": {
        "host_exe": "xil_gzip",
        "compiler": {
            "sources": [
                "./src/host.cpp",
                "LIB_DIR/common/libs/compress/gzipOCLHost.cpp",
                "LIB_DIR/common/libs/compress/gzipBase.cpp",
                "LIB_DIR/common/libs/compress/gzipApp.cpp",
                "LIB_DIR/common/libs/compress/compressApp.cpp",
                "LIB_DIR/common/libs/xcl2/xcl2.cpp",
                "LIB_DIR/common/libs/cmdparser/cmdlineparser.cpp",
                "LIB_DIR/common/libs/logger/logger.cpp",
                "LIB_DIR/common/thirdParty/zlib-1.2.7/crc32.c",
                "LIB_DIR/common/thirdParty/zlib-1.2.7/adler32.c"
            ],
            "includepaths": [
                "LIB_DIR/L2/tests/src/",
                "LIB_DIR/L1/include/hw",
                "LIB_DIR/common/libs/compress/",
                "LIB_DIR/common/thirdParty/zlib-1.2.7"
            ],
            "symbols": [
                "PARALLEL_BLOCK=1",
                "GZIP_MODE=1"
            ]
        }
    },
    "v++": {
        "compiler": {
            "symbols": [
                "MULTIPLE_BYTES=8",
                "GZIP_MODE=1"
            ],
            "includepaths": [
                "LIB_DIR/../security/L1/include"
            ]
        }
    },
    "containers": [
        {
            "name": "decompress",
            "ldclflags": "--config PROJECT/connectivity.cfg",
            "accelerators": [
                {
                    "name": "xilGzipS2MM",
                    "location": "LIB_DIR/L2/tests/src/gzip_dm_s2mm.cpp"
                },
                {
                    "name": "xilGzipMM2S",
                    "location": "LIB_DIR/L2/tests/src/gzip_dm_mm2s.cpp"
                },
                {
                    "name": "xilDecompress",
                    "location": "LIB_DIR/L2/src/zlib_decompress.cpp"
                }
            ]
        }
    ],
    "output_files": [
        "data/sample.txt.gz.*",
        "sample_run.*",
        "test.list"
    ],
    "testinfo": {
        "disable": false,
        "jobs": [
            {
                "index": 0,
                "dependency": [],
                "env": "",
                "cmd": "",
                "max_memory_MB": {
                    "vitis_hw_build": 40960,
                    "vitis_hw_emu": 28672,
                    "vitis_sw_emu": 10240,
                    "vitis_hw_run": 10240
                },
                "max_time_min": {
                    "vitis_hw_build": 470,
                    "vitis_hw_emu": 300,
                    "vitis_sw_emu": 25,
                    "vitis_hw_run": 10
                }
            }
        ],
        "targets": [
            "vitis_sw_emu",
            "vitis_hw_emu",
            "vitis_hw_build",
            "vitis_hw_run"
        ],
        "category": "canary"
    },
    "platform_properties": {
        "vck190": {
            "host": {
                "linker": {
                    "librarypaths": [
                        "$(SYSROOT)/usr/lib",
                        "${SYSROOT}/opt/xilinx/xrt/lib"
                    ]
                },
                "compiler": {
                    "includepaths": [
                        "$(SYSROOT)/usr/include"
                    ],
                    "options": "--sysroot=$(SYSROOT)"
                }
            }
        }
    }
}
