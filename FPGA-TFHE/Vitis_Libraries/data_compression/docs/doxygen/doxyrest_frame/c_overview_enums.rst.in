%{
--------------------------------------------------------------------------------
--
--  This file is part of the Doxyrest toolkit.
--
--  Doxyrest is distributed under the MIT license.
--  For details see accompanying license.txt file,
--  the public copy of which is also available at:
--  http://tibbo.com/downloads/archive/doxyrest/license.txt
--
--------------------------------------------------------------------------------

local argArray = table.pack (...)
local compound = argArray [1]
local prevGetItemName = getItemName

local protectionKind = compound.m_enumArray [1].m_protectionKind

if g_noProtectionSections and hasNonPublicItems (compound.m_enumArray) then
}
	// $protectionKind enums

%{
else
}
	// enums

%{
end -- if

getItemName = getItemSimpleName

local isLastUnnamed = false

for i = 1, #compound.m_enumArray do
	local item = compound.m_enumArray [i]
	local enumKind = getItemKindString (item, "enum")

	if item.m_protectionKind ~= protectionKind then
		protectionKind = item.m_protectionKind
}

	// $protectionKind enums

%{
	end -- if

	if isUnnamedItem (item) then
		if i > 1 then
			emit ("\n")
		end
}
	$enumKind
	{
%{
		for j = 1, #item.m_enumValueArray do
			local subItem = item.m_enumValueArray [j]
}
	    $(getItemNameForOverview (subItem)) $(getLinkedTextString (subItem.m_initializer, true))
%{
		end -- for

		isLastUnnamed = true
}
	}
%{
	else
		local targetFileName = getItemFileName (item)

		if compound.m_compoundKind ~= "group" and not compound.m_isBaseCompound then
			generateFile (targetFileName, "c_enum.rst.in", item)
		end

		if isLastUnnamed then
			emit ("\n")
			isLastUnnamed = false
		end
}
	$enumKind :ref:`$(getItemName (item))<doxid-$(item.m_id)>`
%{
	end -- if
end -- for

getItemName = prevGetItemName
}
