/*
 * Copyright 2020 Xilinx, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <stdint.h>
#include "xf_datamover/load_master_to_stream.hpp"
#include "xf_datamover/get_count.hpp"
#define NUM_CH {{ k["map"] | length }} 


extern "C" void {{ k["name"] }}({% for m in k["map"] %}
    // {{ loop.index0 }}
    ap_uint<{{ m["out"]["width"] }}>* {{ m["in_port"]["name"] }},
    hls::stream<ap_axiu<{{ m["out"]["width"] }}, 0, 0, 0> >& {{ m["out"]["name"] }},
    uint64_t sz{{ loop.index0 }},
{% endfor %}
    uint64_t* m2s_counter) 
{
    using namespace xf::datamover;

    ; // clang-format off{% for m in k["map"] %}
#pragma HLS interface m_axi offset=slave bundle=gmem{{ loop.index0 }} port={{ m["in_port"]["name"] }} \
    max_read_burst_length=32 num_read_outstanding=4 latency=128
#pragma HLS interface s_axilite bundle=control port={{ m["in_port"]["name"] }}
#pragma HLS interface axis port={{ m["out"]["name"] }}
#pragma HLS interface s_axilite bundle=control port=sz{{ loop.index0 }}
{% endfor %}
#pragma HLS interface m_axi offset=slave bundle=gmem_counter port=m2s_counter\
    max_write_burst_length=32 num_write_outstanding=4 latency=128
#pragma HLS interface s_axilite bundle=control port=m2s_counter

#pragma HLS interface s_axilite bundle=control port=return
    ; // clang-format on

    hls::stream<uint64_t> counter_str[NUM_CH];
    hls::stream<ap_uint<1> > mvld_str[NUM_CH];
    uint64_t cnt_data[NUM_CH];
#pragma HLS ARRAY_PARTITION variable=cnt_data complete 

#pragma HLS dataflow
{% for m in k["map"] %}
    loadMasterToStream({{ m["in_port"]["name"] }}, {{ m["out"]["name"] }}, sz{{ loop.index0 }}, mvld_str[{{ loop.index0 }}], &cnt_data[{{ loop.index0 }}]);
    get_count(mvld_str[{{ loop.index0 }}], counter_str[{{ loop.index0 }}]);
{% endfor %}
    write_count(counter_str, cnt_data, m2s_counter, NUM_CH);
}
{# vim: set filetype=cpp : #}
